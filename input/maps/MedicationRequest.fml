
/// url    = "https://fhir.slade360.co.ke/fhir/StructureMap/MedicationRequestSGHI5"
/// name   = "MedicationRequestSGHI5"
/// title  = "MedicationRequest Transforms: R4 â†’ SGHI R5"
/// status = "active"

uses "http://hl7.org/fhir/4.0/StructureDefinition/MedicationRequest"                 alias MedicationRequestR4   as source
uses "https://fhir.slade360.co.ke/fhir/StructureDefinition/sghi-medicationrequest"   alias SGHIMedicationRequest as target


imports "http://hl7.org/fhir/StructureMap/*4to5"

group SGHIMedicationRequest(source src : MedicationRequestR4, target tgt : SGHIMedicationRequest) <<type+>> {
  src.id as uuid -> tgt.id = uuid;
  src.active               -> tgt.active;
  src.language -> tgt.language;

  src -> tgt.meta as t_meta then {
    src -> t_meta.profile = 'https://fhir.slade360.co.ke/fhir/StructureDefinition/sghi-medicationrequest' "add-sghi-profile";
  } "add-to-meta";

  src where text.exists().not() -> tgt.text = create('Narrative') as t_text then {
    src -> t_text.status = 'generated' "set-text-status";
    src -> t_text.div = '<div xmlns="http://www.w3.org/1999/xhtml"><h1>Generated text</h1></div>' "set-text-div";
  } "create-hardcoded-text";

  src -> tgt.text = create('Narrative') as ttt then {
    src.text as st then {
      st.status as s -> ttt.status = s;
      st.div as d -> ttt.div = ('<div xmlns="http://www.w3.org/1999/xhtml"><p>' + d + '</p></div>') "wrap-text-in-html";
    };
  } "setting text";

  src.id as s_id -> tgt.identifier = create('Identifier') as t_ident then {
      s_id as uuid -> t_ident.value = uuid "copy-id";
      src -> t_ident.use = 'official' "set-use";
      src -> t_ident.system = 'https://fhir.slade360.co.ke/fhir/CodeSystem/sghi-identifier-codesystem' "set-system";

      src -> t_ident.type = create('CodeableConcept') as t_type then {
        src -> t_type.coding = create('Coding') as t_code then {
          src -> t_code.system  = 'https://fhir.slade360.co.ke/fhir/CodeSystem/sghi-identifier-codesystem' "type-system";
          src -> t_code.code    = 'fhir-id' "type-code";
          src -> t_code.display = 'FHIR Id' "type-display";
        } "init-coding";
      } "init-type";

      src.meta as sm then {
        sm.tag last as st -> t_ident.assigner = create('Reference') as ta then TransformAssigner(st, ta); 
      } "setting owner";
  } "add-fhir-id-identifier";

  src.status -> tgt.status;
  src.intent -> tgt.intent;
  src.priority -> tgt.priority;
  src.authoredOn -> tgt.authoredOn;

  src.medication as sm -> tgt.medication = create('CodeableReference') as tm then {
    src where reference.exists().not() -> tm.reference = create('Reference') as trf then {
      sm.text -> trf.display;
      sm.text as txt -> trf.reference = append("Medication/", txt) "dummy reference";
    } "set reference";
  };

  src.subject as sb -> tgt.subject as tb then TransformReference(sb, tb);
  src.encounter as se -> tgt.encounter as te then TransformReference(se, te);
  src.requester as sr -> tgt.requester as tr then TransformReference(sr, tr);


  src.category as sg -> tgt.category as tg then {
    sg.coding as sc -> tg.coding as tc then TransformCoding(sc, tc);
    sg.text -> tg.text;
  };

  src.note as sn -> tgt.note as tn then {
    sn.time -> tn.time;
    sn.text -> tn.text;
  };

  src.dosageInstruction as sd -> tgt.dosageInstruction as td then {
    sd.asNeeded -> td.asNeeded;
    sd.doseAndRate as sd -> td.doseAndRate as td then {
      sd.doseQuantity as sq -> td.doseQuantity as tq then {
        sq.code -> tq.code;
        sq.system -> tq.system;
        sq.unit -> tq.unit;
        sq.value -> tq.value;
      };
    };
    sd.patientInstruction -> td.patientInstruction;
    sd.route as sr -> td.route as tr then {
      sr.coding as sc -> tr.coding as tc then TransformCoding(sc, tc);
      sr where coding.exists().not() -> tr.coding = create('Coding') as tc, tc.system = 'https://fhir.slade360.co.ke/fhir/CodeSystem/sghi-identifier-codesystem', tc.code = 'iv', tc.display = 'Intravenous' "setting default route";
      sr.text -> tr.text;
    };
    sd.timing as st -> td.timing as tt then {
      st.repeat as sp -> tt.repeat as tp then {
        sp.boundsPeriod as sprd -> tp.boundsPeriod as tprd then {
          sprd.end -> tprd.end;
          sprd.start -> tprd.start;
        };
        sp.duration -> tp.duration;
        sp.durationUnit -> tp.durationUnit;
        sp.frequency -> tp.frequency;
        sp.period -> tp.period;
        sp.periodUnit -> tp.periodUnit;
      };
    };
  };
}

group TransformAssigner(source src, target tgt) <<types>> {
  src.code as code -> tgt.reference = append("Organization/", code);
  src where display.exists().not() -> tgt.display = 'Unknown display' "setting default display";
  src.display -> tgt.display;
  src.code -> tgt.id;
}

group TransformReference(source src, target tgt) <<types>> {
  src.id -> tgt.id;
  src.reference -> tgt.reference;
  src.display -> tgt.display;
  src where display.exists().not() -> tgt.display = 'Unknown display' "setting display";
}

group TransformCoding(source src, target tgt) <<types>> {
  src.code -> tgt.code;
  src.display -> tgt.display;
  src where display.exists().not() -> tgt.display = 'Unknown display' "setting-default-display";
  src.system -> tgt.system;
}